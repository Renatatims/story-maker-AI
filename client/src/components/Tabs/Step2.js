import React, { useState } from "react";
import {
  Button,
  Container,
  TextField,
  Typography,
  Box,
  Grid,
  CircularProgress,
  Paper,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import Auth from "../../utils/auth";

// Apollo useMutation() Hook
import { useMutation } from "@apollo/client";
//Import Mutation
import { SAVE_IMAGE } from "../../utils/mutations";

import { Configuration, OpenAIApi } from "openai";
import images2 from "../../utils/images2";

const API_KEY = process.env.REACT_APP_API_KEY;

const configuration = new Configuration({
  apiKey: API_KEY,
});
const openai = new OpenAIApi(configuration);

async function generateImage(prompt) {
  try {
    const response = await openai.createImage({
      prompt: prompt,
      n: 1,
    });
    return response.data.data[0].url;
  } catch (error) {
    console.error(error);
    return "";
  }
}

const ImageGenerator = () => {
  const [prompt, setPrompt] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  const [loading, setLoading] = useState(false);
  const [saveImage] = useMutation(SAVE_IMAGE);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    const imagePrompt = prompt;
    try {
      const generatedImageUrl = await generateImage(imagePrompt);

      // Convert the image to Base64
      try {
        const response = await fetch(`/proxy-image?url=${generatedImageUrl}`);
        const blob = await response.blob();
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = async () => {
          const base64Image = reader.result;

          // Local storage Images
          const storedUrls = localStorage.getItem("imageUrls");
          const urlsArray = storedUrls ? JSON.parse(storedUrls) : [];

          // Add new URL to array and store back into local storage
          urlsArray.push(generatedImageUrl);

          // Store the updated array back into local storage
          localStorage.setItem("imageUrls", JSON.stringify(urlsArray));

          // Update the UI with the generated image URL
          setImageUrl(generatedImageUrl);

          setLoading(false);

          // Save the image to the database if user is logged in
          if (Auth.loggedIn()) {
            try {
              await saveImage({
                variables: {
                  imageData: {
                    image: base64Image,
                  },
                },
              });
            } catch (saveError) {
              console.error("Error saving image:", saveError);
            }
          }
        };
      } catch (fetchError) {
        console.error("Error fetching the image:", fetchError);
        setLoading(false);
      }
    } catch (generationError) {
      console.error("Error generating the image:", generationError);
      setLoading(false);
    }
  };

  //Render example Images - generated by AI
  const [setSelectedImage] = useState(null);

  const handleSelect = (image) => {
    setSelectedImage(image);
  };

  const Item = styled(Paper)(({ theme }) => ({
    backgroundColor: theme.palette.mode === "dark" ? "#1A2027" : "#fff",
    ...theme.typography.body2,
    padding: theme.spacing(1),
    textAlign: "center",
    color: theme.palette.text.secondary,
  }));

  return (
    <>
      <Container>
        <Typography
          variant="h4"
          sx={{
            fontFamily: "Kreon",
            fontSize: {
              xs: "30px",
              sm: "35px",
              md: "40px",
            },
          }}
        >
          Step 2: Create a personalized image using AI
        </Typography>
        <Box component="form" onSubmit={handleSubmit} mt={2}>
          <TextField
            label="Enter a description"
            fullWidth
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
          />
          <Button
            type="submit"
            color="primary"
            variant="contained"
            disabled={!prompt || loading}
            style={{ marginTop: "1rem" }}
          >
            Generate Image
          </Button>
        </Box>
        {loading && <CircularProgress />}
        {imageUrl && (
          <Box mt={4}>
            <img src={imageUrl} alt="Generated" style={{ maxWidth: "100%" }} />
          </Box>
        )}
        {!Auth.loggedIn() && (
          <Typography
            variant="h6"
            style={{
              fontFamily: "Kreon",
              fontSize: "25px",
              alignItems: "center",
              color: "red"
            }}
          >
            Please login or signup to save images to your account
          </Typography>
        )}
      </Container>

      <Box sx={{ flexGrow: 1 }}>
        <Typography
          variant="h5"
          style={{
            fontFamily: "Kreon",
            fontSize: "40px",
            textAlign: "center",
          }}
        >
          AI images generated
        </Typography>
        <Typography
          variant="h6"
          style={{ fontFamily: "Kreon", fontSize: "25px" }}
        >
          Christmas Theme
        </Typography>
        <Grid container spacing={2}>
          {images2.map(
            (image) =>
              image.id <= 4 && (
                <Grid key={image.id} item xs={6} md={3}>
                  <Item
                    onClick={() => handleSelect(image)}
                    sx={{ cursor: "pointer" }}
                  >
                    <img
                      src={image.url}
                      alt={image.title}
                      style={{ maxHeight: "200px" }}
                    />
                    <Grid item>
                      <Grid container justifyContent="center" spacing={1}>
                        <Grid item>{image.title}</Grid>
                      </Grid>
                    </Grid>
                  </Item>
                </Grid>
              )
          )}
        </Grid>

        <Typography
          variant="h6"
          style={{ fontFamily: "Kreon", fontSize: "25px" }}
        >
          Princess Theme
        </Typography>
        <Grid container spacing={2}>
          {images2.map(
            (image) =>
              image.id >= 5 && (
                <Grid key={image.id} item xs={6} md={3}>
                  <Item
                    onClick={() => handleSelect(image)}
                    sx={{ cursor: "pointer" }}
                  >
                    <img
                      src={image.url}
                      alt={image.title}
                      style={{ maxHeight: "200px" }}
                    />
                    <Grid item>
                      <Grid container justifyContent="center" spacing={1}>
                        <Grid item>{image.title}</Grid>
                      </Grid>
                    </Grid>
                  </Item>
                </Grid>
              )
          )}
        </Grid>
      </Box>
    </>
  );
};

export default ImageGenerator;
