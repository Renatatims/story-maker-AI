import React, { useState } from 'react';
import {
  Button,
  Container,
  TextField,
  Typography,
  Box,
  Grid,
  CircularProgress,
  Paper,
} from "@mui/material";
import { styled } from "@mui/material/styles";

import { Configuration, OpenAIApi } from "openai";
import images2 from "../../utils/images2";

const API_KEY = process.env.REACT_APP_API_KEY;

const configuration = new Configuration({
  apiKey: API_KEY,
});
const openai = new OpenAIApi(configuration);

async function generateImage(prompt) {
  try {
    const response = await openai.createImage({
      prompt: prompt,
      n: 1,
    });
    return response.data.data[0].url;
  } catch (error) {
    console.error(error);
    return "";
  }
}

const ImageGenerator = () => {
  const [prompt, setPrompt] = useState('');
  const [imageUrl, setImageUrl] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (event) => {
    event.preventDefault();
    setLoading(true);

    const imagePrompt = prompt;
    const generatedImageUrl = await generateImage(imagePrompt);
    setImageUrl(generatedImageUrl);

    setLoading(false);
  };

   //Render example Images - generated by AI
   const [ setSelectedImage] = useState(null);

   const handleSelect = (image) => {
     setSelectedImage(image);
   };

   const Item = styled(Paper)(({ theme }) => ({
    backgroundColor: theme.palette.mode === "dark" ? "#1A2027" : "#fff",
    ...theme.typography.body2,
    padding: theme.spacing(1),
    textAlign: "center",
    color: theme.palette.text.secondary,
  }));

  return (
   <>
    <Container>
      <Typography variant="h4" style={{ fontFamily:"Rancho", fontSize: "48px" }}>Step 2: Create a personalized image using AI</Typography>
      <Box component="form" onSubmit={handleSubmit} mt={2}>
        <TextField
          label="Enter a description"
          fullWidth
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
        />
        <Button
          type="submit"
          color="primary"
          variant="contained"
          disabled={!prompt || loading}
          style={{ marginTop: '1rem' }}
        >
          Generate Image
        </Button>
      </Box>
      {loading && <CircularProgress />}
      {imageUrl && (
        <Box mt={4}>
          <img src={imageUrl} alt="Generated" style={{ maxWidth: '100%' }} />
        </Box>
      )}
    </Container>
    <Box sx={{ flexGrow: 1 }}>
    <Typography variant="h5" style={{ fontFamily:"Rancho", fontSize: "40px", textAlign: "center" }}>AI images generated</Typography>
    <Typography variant="h6" style={{ fontFamily:"Rancho", fontSize: "25px" }}>Christmas Theme </Typography>
    <Grid container spacing={2}>
      {images2.map((image) => (
        <Grid key={image.id} item xs={4}>
          <Item
            onClick={() => handleSelect(image)}
            sx={{ cursor: "pointer" }}
          >
            <img
              src={image.url}
              alt={image.title}
              style={{ maxHeight: "200px" }}
            />
            <Grid item>
              <Grid container justifyContent="center" spacing={1}>
                <Grid item>{image.title}</Grid>
              </Grid>
            </Grid>
          </Item>
        </Grid>
      ))}
    </Grid>
  </Box>
  </>
  );
};

export default ImageGenerator;
